import{_ as l,h as r,i as u,p as n,j as a,k as e,t as c,q as s,m as p,l as i}from"./app.d44df62d.js";var d="/vuepress-shader/images/js01.png";const k={},m={class:"table-of-contents"},v=s("1. scope \u8303\u56F4"),b=s("2. conformance \u4E00\u81F4\u6027\u58F0\u660E"),h=s("3. Normative References \u89C4\u8303\u6027\u53C2\u8003"),f=s("4. Overview \u6982\u8FF0"),y=s("4.1 Web Script"),g=s("4.2 hosts and implementations"),x=s("4.3 ECMAScript Overview"),j=s("4.4 terms and definitions"),w=s("5. Notational Conventions \u7B26\u53F7\u7EA6\u5B9A"),_=s("6. ECMAScript Data Types and Values ECMA \u6570\u636E\u7C7B\u578B\u548C\u503C"),O=s("6.1 ECMAScript language types"),S=s("6.1.7 The Object Type"),N=p('<h2 id="_1-scope-\u8303\u56F4" tabindex="-1"><a class="header-anchor" href="#_1-scope-\u8303\u56F4" aria-hidden="true">#</a> 1. scope \u8303\u56F4</h2><p>\u6807\u51C6\u5B9A\u4E49 ECMA2021 \u666E\u904D\u6027\u7F16\u7A0B\u8BED\u8A00</p><h2 id="_2-conformance-\u4E00\u81F4\u6027\u58F0\u660E" tabindex="-1"><a class="header-anchor" href="#_2-conformance-\u4E00\u81F4\u6027\u58F0\u660E" aria-hidden="true">#</a> 2. conformance \u4E00\u81F4\u6027\u58F0\u660E</h2><div class="custom-container tip"><p class="custom-container-title">\u539F\u6587</p><p>A conforming implementation of ECMAScript must provide and support all the types, values, objects, properties, functions, and program syntax and semantics described in this specification.</p></div><p>ECMA \u7684\u4E00\u81F4\u6027\u5B9E\u73B0\u5305\u62EC\u63D0\u4F9B\u548C\u5B9E\u73B0\u6240\u6709\u7684\u7C7B\u578B\uFF0C\u503C\uFF0C\u5BF9\u8C61\uFF0C\u5C5E\u6027\uFF0C\u51FD\u6570\uFF0C\u4EE5\u53CA\u89C4\u8303\u4E2D\u63CF\u8FF0\u7684\u7A0B\u5E8F\u7684\u8BED\u4E49\u548C\u8BED\u6CD5</p><div class="custom-container tip"><p class="custom-container-title">\u539F\u6587</p><p>A conforming implementation of ECMAScript may provide additional types, values, objects, properties, and functions beyond those described in this specification.</p></div><p>ECMA \u7684\u4E00\u81F4\u6027\u5B9E\u73B0\u53EF\u80FD\u63D0\u4F9B\u8D85\u524D\u672C\u89C4\u8303\u63CF\u8FF0\u7684\u65B0\u589E\u7684\u7C7B\u578B\uFF0C\u503C\uFF0C\u5BF9\u8C61\uFF0C\u5C5E\u6027\u548C\u51FD\u6570\u3002</p><h2 id="_3-normative-references-\u89C4\u8303\u6027\u53C2\u8003" tabindex="-1"><a class="header-anchor" href="#_3-normative-references-\u89C4\u8303\u6027\u53C2\u8003" aria-hidden="true">#</a> 3. Normative References \u89C4\u8303\u6027\u53C2\u8003</h2><p>ECMA 402 ECMA 2015 international API specification ES6 \u56FD\u9645\u5316 API \u89C4\u8303 <br> ECMA 404 The JSON Data Interchange Format. JSON \u6570\u636E\u4EA4\u6362\u683C\u5F0F</p><h2 id="_4-overview-\u6982\u8FF0" tabindex="-1"><a class="header-anchor" href="#_4-overview-\u6982\u8FF0" aria-hidden="true">#</a> 4. Overview \u6982\u8FF0</h2><div class="custom-container tip"><p class="custom-container-title">\u6458\u6284</p><p>ECMAScript is now a fully featured general-purpose programming language.</p></div><p>ECMA \u73B0\u5728\u5DF2\u7ECF\u662F\u4E00\u95E8\u529F\u80FD\u9F50\u5168\u7684\u901A\u7528\u578B\u7F16\u7A0B\u8BED\u8A00</p><h3 id="_4-1-web-script" tabindex="-1"><a class="header-anchor" href="#_4-1-web-script" aria-hidden="true">#</a> 4.1 Web Script</h3><div class="custom-container tip"><p class="custom-container-title">\u539F\u6587</p><p>A web browser provides an ECMAScript host environment for client-side computation including, for instance, objects that represent windows, menus, pop-ups, dialog boxes, text areas, anchors, frames, history, cookies, and input/output. Further, the host environment provides a means to attach scripting code to events such as change of focus, page and image loading, unloading, error and abort, selection, form submission, and mouse actions. Scripting code appears within the HTML and the displayed page is a combination of user interface elements and fixed and computed text and images. The scripting code is reactive to user interaction, and there is no need for a main program.<br> A web server provides a different host environment for server-side computation including objects representing requests, clients, and files; and mechanisms to lock and share data. By using browser-side and server-side scripting together, it is possible to distribute computation between the client and server while providing a customized user interface for a Web-based application.<br></p><div class="tip-aqua">Each Web browser and server that supports ECMAScript supplies its own host environment, completing the ECMAScript execution environment.</div></div><div class="tip-aqua">\u6BCF\u4E2A\u652F\u6301ECMA\u7684web\u6D4F\u89C8\u5668\u548C\u670D\u52A1\u5668\u90FD\u63D0\u4F9B\u5176\u81EA\u8EAB\u7684\u5BBF\u4E3B\u73AF\u5883\uFF0C\u5B8C\u6210ECMA\u6267\u884C\u73AF\u5883</div><h3 id="_4-2-hosts-and-implementations" tabindex="-1"><a class="header-anchor" href="#_4-2-hosts-and-implementations" aria-hidden="true">#</a> 4.2 hosts and implementations</h3><div class="custom-container tip"><p class="custom-container-title">\u539F\u6587</p><p>To aid integrating ECMAScript into host environments, this specification defers the definition of certain facilities (e.g., abstract operations), either in whole or in part, to a source outside of this specification. Editorially, this specification distinguishes the following kinds of deferrals</p></div><p>\u4E3A\u4E86\u5C06 ECMA \u6574\u5408\u5230\u5BBF\u4E3B\u73AF\u5883\uFF0C\u672C\u89C4\u8303\u63A8\u8FDF\u4E86\u90E8\u5206\u6574\u4F53\u548C\u5C40\u90E8\u7684\u4E89\u5BF9\u672C\u89C4\u8303\u5916\u7684 Source \u7684\u529F\u80FD(facilities)\u7684\u5B9A\u4E49(\u6BD4\u5982\u62BD\u8C61\u64CD\u4F5C)\u3002\u793E\u8BBA\u4E0A\uFF0C\u672C\u89C4\u8303\u533A\u5206\u4E3A\u4EE5\u4E0B\u51E0\u79CD&quot;\u63A8\u8FDF&quot;</p><div class="custom-container tip"><p class="custom-container-title">defferrals</p><p>An <code>implementation</code> is an external source that further defines facilities enumerated in Annex D or those that are marked as implementation-defined or implementation-approximated. In informal use, an implementation refers to a concrete artefact, such as a particular web browser.<br> An <code>implementation-defined facility</code> is one defers its definition to an external source without further qualification.This specification does not make any recommendations for particular behaviours, and conforming implementations are free to choose any behaviour within the constraints put forth by this specification.<br> An <code>implementation-approximated facility</code> is one defers its definition to an external source while recommending an ideal behaviour. While conforming implementations are free to choose any behaviour within the constraints put forth by this specification, they are encouraged to strive to approximate the ideal. Some mathematical operations, such as Math.exp, are implementation-approximated.<br> A <code>host</code> is an external source that further defines facilities listed in Annex D but does not further define other implementation-defined or implementation-approximated facilities. In informal use, a host refers to the set of all implementations, such as the set of all web browsers, that interface with this specification in the same way via AnnexD. A host is often an external specification, such as WHATWG HTML (https://html.spec.whatwg.org/). In other words, facilities that are host-defined are often further defined in external specifications.<br> A <code>host hook</code> is an abstract operation that is defined in whole or in part by an external source. All host hooks must be listed in Annex D.<br> A <code>host-defined facility</code> is one defers its definition to an external source without further qualification and is listed in Annex D. Implementations that are not hosts may also provide definitions for host-defined facilities.<br> A <code>host environment</code> is a particular choice of definition for all host-defined facilities. A host environment typically includes objects or functions which allow obtaining input and providing output as host-defined properties of the global object</p></div><p>implementation \u6267\u884C approximated \u8FD1\u4F3C\u7684<br> &quot;\u8FD1\u4F3C\u6267\u884C&quot;\uFF0C\u4E00\u4E9B\u6570\u5B66\u7684\u64CD\u4F5C\uFF0C\u6BD4\u5982 Math.exp\uFF0C\u5C31\u662F\u8FD1\u4F3C\u6267\u884C<br> informal \u975E\u6B63\u5F0F\u7684 facilities \u5B9E\u73B0<br></p><h4 id="_4-2-1-host-hooks" tabindex="-1"><a class="header-anchor" href="#_4-2-1-host-hooks" aria-hidden="true">#</a> 4.2.1 HOST Hooks</h4><ul><li>HostCallJobCallBack(callback,V,argumentList) let hosts restore state when invoking JavaScript callbacks from inside tasks</li><li>HostEnqueuePromiseJob(job,realm) ...</li></ul><h3 id="_4-3-ecmascript-overview" tabindex="-1"><a class="header-anchor" href="#_4-3-ecmascript-overview" aria-hidden="true">#</a> 4.3 ECMAScript Overview</h3><div class="custom-container tip"><p class="custom-container-title">\u6458\u6284</p><p>ECMAScript is object-basic ... an ECMAScript program is a cluster of communicating objects<br></p><div class="tip-aqua"> A primitive value is a member of one of the following built-in types: Undefined, Null, Boolean, Number, BigInt, String, and Symbol; an object is a member of the built-in type Object; and a function is a callable object. A function that is associated with an object via a property is called a method. </div> ECMAScript also defines a set of built-in operators. ECMAScript operators include various unary operations, multiplicative operators, additive operators, bitwise shift operators, relational operators, equality operators, binary 4.3 ECMAScript Overview 49 bitwise operators, binary logical operators, assignment operators, and the comma operator.<br></div><p>resemble \u7C7B\u4F3C<br> ECMAScript syntax intentionally resembles Java Syntax</p><h4 id="_4-3-1-object" tabindex="-1"><a class="header-anchor" href="#_4-3-1-object" aria-hidden="true">#</a> 4.3.1 Object</h4><p>new Date(2009,11)</p>',27),I={class:"tip-aqua"},A=s(" Date() "),q={class:"tip-aqua"},E=p('<div class="custom-container warning"><p class="custom-container-title">constructor</p><p>Invoking a constructor without using new has consequences that depend on the constructor</p></div><p>\u8C03\u7528\u6784\u9020\u51FD\u6570\u800C\u4E0D\u4F7F\u7528 new \u7684\u7ED3\u679C\u53D6\u51B3\u4E8E\u6784\u9020\u51FD\u6570</p><div class="custom-container tip"><p class="custom-container-title">about prototype chain</p><p>Every object created by a constructor has an implicit reference (called the object&#39;s prototype) to the value of its constructor&#39;s &quot;prototype&quot; property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the prototype chain.</p><p class="tip-aqua"> When a reference is made to a property in an object, that reference is to the property of that name in the first object in the prototype chain that contains a property of that name. </p> In other words,first the object mentioned directly is examined for such a property; if that object contains the named property, that is the property to which the reference refers; if that object does not contain the named property, the prototype for that object is examined next; and so on. </div><p>\u6784\u9020\u51FD\u6570\u521B\u5EFA\u7684\u5BF9\u8C61\u4E0E\u6784\u9020\u51FD\u6570\u7684prototype\u5C5E\u6027\u7684\u503C\u5305\u542B\u4E00\u79CD\u9690\u5F0F\u5F15\u7528\uFF08\u88AB\u79F0\u4E4B\u4E3A\u5BF9\u8C61\u7684\u539F\u578B\uFF09\u3002</p><p class="tip-aqua"> \u5BF9\u4E00\u4E2A\u5BF9\u8C61\u5C5E\u6027\u7684\u5F15\u7528\uFF0C\u5176\u5B9E\u5C31\u662F\u5F15\u7528\u539F\u578B\u94FE\u4E2D\u5305\u542B\u8BE5\u5C5E\u6027\u7684\u7B2C\u4E00\u4E2A\u5BF9\u8C61\u4E2D\u8BE5\u5BF9\u8C61\u5C5E\u6027\u7684\u540D\u79F0 </p><h4 id="_4-3-2-the-strict-variant-of-ecmascript" tabindex="-1"><a class="header-anchor" href="#_4-3-2-the-strict-variant-of-ecmascript" aria-hidden="true">#</a> 4.3.2 the strict variant of ECMAScript</h4><div class="custom-container tip"><p class="custom-container-title">\u89E3\u91CA</p><p>The strict variant of the language excludes some specific syntactic and semantic features of the regular ECMAScript language and modifies the detailed semantics of some features.</p></div><div class="custom-container tip"><p class="custom-container-title">\u89C4\u8303</p><p>In addition,an implementation must support the combination of unrestricted and strict mode source text units into a single composite program.</p></div><p>\u4E25\u683C\u6A21\u5F0F\u548C\u975E\u4E25\u683C\u6A21\u5F0F\u7684\u5355\u5143\u6D4B\u8BD5\u90FD\u8981\u901A\u8FC7</p><h3 id="_4-4-terms-and-definitions" tabindex="-1"><a class="header-anchor" href="#_4-4-terms-and-definitions" aria-hidden="true">#</a> 4.4 terms and definitions</h3><h4 id="_4-4-1-implementation-approximated" tabindex="-1"><a class="header-anchor" href="#_4-4-1-implementation-approximated" aria-hidden="true">#</a> 4.4.1 implementation-approximated</h4><h4 id="_4-4-2-implementation-defined" tabindex="-1"><a class="header-anchor" href="#_4-4-2-implementation-defined" aria-hidden="true">#</a> 4.4.2 implementation-defined</h4><h4 id="_4-4-3-host-defined" tabindex="-1"><a class="header-anchor" href="#_4-4-3-host-defined" aria-hidden="true">#</a> 4.4.3 host-defined</h4><h4 id="_4-4-4-type" tabindex="-1"><a class="header-anchor" href="#_4-4-4-type" aria-hidden="true">#</a> 4.4.4 type</h4><h4 id="_4-4-5-primitive-type" tabindex="-1"><a class="header-anchor" href="#_4-4-5-primitive-type" aria-hidden="true">#</a> 4.4.5 primitive type</h4><h4 id="_4-4-6-object" tabindex="-1"><a class="header-anchor" href="#_4-4-6-object" aria-hidden="true">#</a> 4.4.6 object</h4><h4 id="_4-4-7-constructor" tabindex="-1"><a class="header-anchor" href="#_4-4-7-constructor" aria-hidden="true">#</a> 4.4.7 constructor</h4><h4 id="_4-4-8-prototype" tabindex="-1"><a class="header-anchor" href="#_4-4-8-prototype" aria-hidden="true">#</a> 4.4.8 prototype</h4><h4 id="_4-4-9-ordinary-object-\u666E\u901A\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#_4-4-9-ordinary-object-\u666E\u901A\u5BF9\u8C61" aria-hidden="true">#</a> 4.4.9 ordinary object \u666E\u901A\u5BF9\u8C61</h4><h4 id="_4-4-10-exotic-object-\u5916\u6765\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#_4-4-10-exotic-object-\u5916\u6765\u5BF9\u8C61" aria-hidden="true">#</a> 4.4.10 exotic object \u5916\u6765\u5BF9\u8C61</h4><p>\u4E0D\u5B8C\u5168\u62E5\u6709\u6240\u6709\u5BF9\u8C61\u7684\u5185\u7F6E\u65B9\u6CD5</p><div class="custom-container tip"><p class="custom-container-title">\u58F0\u660E</p><p>Any object that is not an ordinary object is an exotic object.</p></div><h4 id="_4-4-11-standard-object-\u6807\u51C6\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#_4-4-11-standard-object-\u6807\u51C6\u5BF9\u8C61" aria-hidden="true">#</a> 4.4.11 standard object \u6807\u51C6\u5BF9\u8C61</h4><p>object whose semantics are defined by this specification</p><h4 id="built-in-object" tabindex="-1"><a class="header-anchor" href="#built-in-object" aria-hidden="true">#</a> built-in object</h4><p>object specified and supplied by an ECMAScript implementation ....</p><h4 id="_4-4-31-symbol-value" tabindex="-1"><a class="header-anchor" href="#_4-4-31-symbol-value" aria-hidden="true">#</a> 4.4.31 Symbol value</h4><p>primitive value that represents a unique, non-String Object property key</p><h2 id="_5-notational-conventions-\u7B26\u53F7\u7EA6\u5B9A" tabindex="-1"><a class="header-anchor" href="#_5-notational-conventions-\u7B26\u53F7\u7EA6\u5B9A" aria-hidden="true">#</a> 5. Notational Conventions \u7B26\u53F7\u7EA6\u5B9A</h2><p>...</p><h2 id="_6-ecmascript-data-types-and-values-ecma-\u6570\u636E\u7C7B\u578B\u548C\u503C" tabindex="-1"><a class="header-anchor" href="#_6-ecmascript-data-types-and-values-ecma-\u6570\u636E\u7C7B\u578B\u548C\u503C" aria-hidden="true">#</a> 6. ECMAScript Data Types and Values ECMA \u6570\u636E\u7C7B\u578B\u548C\u503C</h2><h3 id="_6-1-ecmascript-language-types" tabindex="-1"><a class="header-anchor" href="#_6-1-ecmascript-language-types" aria-hidden="true">#</a> 6.1 ECMAScript language types</h3><p>Undefined,Null,Boolean,String,Symbol,Number,BigInt,Object</p><h4 id="_6-1-1-the-undefined-type" tabindex="-1"><a class="header-anchor" href="#_6-1-1-the-undefined-type" aria-hidden="true">#</a> 6.1.1 the Undefined type</h4><div class="custom-container tip"><p class="custom-container-title">\u539F\u6587</p><p>Any variable that has not been assigned a value has the value undefined.</p></div><h4 id="_6-1-2-the-null-type" tabindex="-1"><a class="header-anchor" href="#_6-1-2-the-null-type" aria-hidden="true">#</a> 6.1.2 the null type</h4><p>just null</p><h4 id="_6-1-3-the-boolean-type" tabindex="-1"><a class="header-anchor" href="#_6-1-3-the-boolean-type" aria-hidden="true">#</a> 6.1.3 the boolean type</h4><h4 id="_6-1-4-the-string-type" tabindex="-1"><a class="header-anchor" href="#_6-1-4-the-string-type" aria-hidden="true">#</a> 6.1.4 the string type</h4><div class="custom-container tip"><p class="custom-container-title">\u6458\u6284</p><p>The String type is generally used to represent textual data in a running ECMAScript program, in which case each element in the String is treated as a UTF-16 code unit value.</p></div><h5 id="the-function-string-prototypr-normalize-can-be-used-to-explicitly-normalize-a-string-value" tabindex="-1"><a class="header-anchor" href="#the-function-string-prototypr-normalize-can-be-used-to-explicitly-normalize-a-string-value" aria-hidden="true">#</a> - the function String.prototypr.normalize can be used to explicitly normalize a String value.</h5><p>\u53C2\u6570<br> NFC \u2014 Normalization Form Canonical Composition.<br> NFD \u2014 Normalization Form Canonical Decomposition.<br> NFKC \u2014 Normalization Form Compatibility Composition.<br> NFKD \u2014 Normalization Form Compatibility Decomposition.<br> compatibility \u517C\u5BB9\u6027 canonical\u89C4\u8303\u6027<br> composition\u5408\u5E76 decomposition\u5206\u89E3<br></p>',42),B={class:"tip-aqua"},C=n("br",null,null,-1),M=p(`<h5 id="_6-1-4-1-stringindexof" tabindex="-1"><a class="header-anchor" href="#_6-1-4-1-stringindexof" aria-hidden="true">#</a> 6.1.4.1 StringIndexOf</h5><div class="custom-container tip"><p class="custom-container-title">\u89E3\u91CA</p><p>The abstract operation StringIndexOf takes arguments string (a String), searchValue (a String), and fromIndex (a nonnegative integer). It performs the following steps when called:<br></p><ol><li>Assert: Type(string) is String.<br></li><li>Assert: Type(searchValue) is String.<br></li><li>Assert: fromIndex is a non-negative integer.<br></li><li>Let len be the length of string.<br></li><li>If searchValue is the empty String and fromIndex \u2264 len, return fromIndex.<br></li><li>Let searchLen be the length of searchValue.<br></li><li>For each integer i starting with fromIndex such that i \u2264 len - searchLen, in ascending order, do<br> a. Let candidate be the substring of string from i to i + searchLen.<br> b. If candidate is the same sequence of code units as searchValue, return i.<br></li><li>Return -1.</li></ol></div><h4 id="_6-1-5-the-symbol-type" tabindex="-1"><a class="header-anchor" href="#_6-1-5-the-symbol-type" aria-hidden="true">#</a> 6.1.5 the Symbol type</h4><div class="custom-container tip"><p class="custom-container-title">about</p><p>the Symbol type is the set of all non-String values that may be used as the key of Object property.</p></div><h5 id="_6-1-5-1-well-know-symbol" tabindex="-1"><a class="header-anchor" href="#_6-1-5-1-well-know-symbol" aria-hidden="true">#</a> 6.1.5.1 well-know symbol</h5><table><thead><tr><th>name</th><th>description</th><th>value and purpose</th></tr></thead><tbody><tr><td>@@asyncIterator</td><td>Symbol.asyncIterator</td><td>a method that returns the default <a href="#async-iteration%E5%BC%82%E6%AD%A5%E9%81%8D%E5%8E%86">AsyncIterator</a> for an object . Called by the semantics of the for-await-of statement</td></tr><tr><td>@@iterator</td><td>Symbo.iterator</td><td>a method that returns the default <a href="#iterator%E9%81%8D%E5%8E%86%E5%99%A8%E5%92%8Cfor-of-%E5%BE%AA%E7%8E%AF">Iterator</a> for an object.</td></tr></tbody></table><h5 id="iterator\u904D\u5386\u5668\u548Cfor-of-\u5FAA\u73AF" tabindex="-1"><a class="header-anchor" href="#iterator\u904D\u5386\u5668\u548Cfor-of-\u5FAA\u73AF" aria-hidden="true">#</a> Iterator\u904D\u5386\u5668\u548Cfor of \u5FAA\u73AF</h5><ul><li>\u4E3A\u5404\u79CD\u6570\u636E\u63D0\u4F9B\u4E00\u4E2A\u7EDF\u4E00\u7684\u3001\u7B80\u4FBF\u7684\u8BBF\u95EE\u63A5\u53E3</li><li>\u4F7F\u5F97\u6570\u636E\u7ED3\u6784\u7684\u6210\u5458\u80FD\u6309\u7167\u67D0\u79CD\u6B21\u5E8F\u6392\u5217</li><li>\u521B\u9020\u65B0\u7684\u904D\u5386\u547D\u4EE4 for of \u904D\u5386\u5668\uFF0C\u6307\u9488\u5BF9\u8C61\uFF0Cnext\u65B9\u6CD5\u8FD4\u56DE\u503C\u7684\u63CF\u8FF0\u5982\u4E0B</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">Iterable</span><span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span>Iterator<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>
  <span class="token function">next</span><span class="token punctuation">(</span>value<span class="token operator">?</span><span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">)</span><span class="token operator">:</span>IterationResult<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">Iterationresult</span> <span class="token punctuation">{</span>
  value<span class="token operator">:</span><span class="token builtin">any</span><span class="token punctuation">,</span>
  done<span class="token operator">:</span>Boolean
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">next</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">{</span>
          <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
          <span class="token literal-property property">done</span><span class="token operator">:</span><span class="token boolean">true</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u8FF0\u4EE3\u7801\u4E2D,obj\u662F\u53EF\u904D\u5386\u7684(iterable)\uFF0C\u56E0\u4E3A\u5177\u6709Symbol.iterator\u5C5E\u6027\u3002\u6267\u884C\u8FD9\u4E2A\u5C5E\u6027\u4F1A\u8FD4\u56DE\u4E00\u4E2A\u904D\u5386\u5668\u5BF9\u8C61\uFF0C\u8FD9\u4E2Av \u5BF9\u8C61\u7684\u6839\u672C\u7279\u5F81\u5C31\u662F\u5177\u6709next\u65B9\u6CD5\u3002 \u539F\u751F\u5177\u6709Iterator\u63A5\u53E3\u7684\u6570\u636E\u7ED3\u6784\u5305\u542B</p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>\u51FD\u6570\u7684arguments\u5BF9\u8C61</li><li>NodeList\u5BF9\u8C61</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> iter <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">//{value: 0, done: false}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4F7F\u7528 for of \u904D\u5386</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Obj\u5BF9\u8C61\u6CA1\u6709\u90E8\u7F72Iterator\u63A5\u53E3\uFF0C\u662F\u56E0\u4E3A\u5BF9\u8C61\u5C5E\u6027\u7684\u904D\u5386\u5148\u540E\u987A\u5E8F\u662F\u4E0D\u786E\u5B9A\u7684\uFF0C\u9700\u8981\u624B\u52A8\u6307\u5B9A\u3002</p><div class="custom-container tip"><p class="custom-container-title">\u8C03\u7528iterator\u7684\u573A\u6240</p><ul><li>\u7ED3\u6784\u8D4B\u503C</li><li>\u6269\u5C55\u8FD0\u7B97...</li><li>yield *</li></ul></div><blockquote><p>\u6CE8\uFF1Afor in \u5FAA\u73AF\u8BFB\u53D6\u952E\u540D \uFF1B for of \u5FAA\u73AF\u83B7\u53D6\u952E\u503C \u5982\u679C\u8981\u901A\u8FC7for of \u83B7\u53D6\u6570\u7EC4\u7684\u7D22\u5F15\uFF0C\u53EF\u4EE5\u501F\u52A9\u6570\u7EC4\u5B9E\u4F8B\u7684entries\u65B9\u6CD5\u548Ckeys\u65B9\u6CD5</p></blockquote><h5 id="async-iteration\u5F02\u6B65\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#async-iteration\u5F02\u6B65\u904D\u5386" aria-hidden="true">#</a> async iteration\u5F02\u6B65\u904D\u5386</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">createAsyncIterable</span><span class="token punctuation">(</span><span class="token parameter">asyncIterable</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> elem <span class="token keyword">of</span> syncIterable<span class="token punctuation">)</span><span class="token punctuation">{</span>
    yeild elem<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>name</th><th>description</th><th>value and purpose</th></tr></thead><tbody><tr><td>@@hasInstance</td><td>Symbol.hasInstance</td><td>A method that determines if a constructor object recognizes an object as one of the constructor&#39;s instances.Called by the semantics of the instanceof operator.</td></tr></tbody></table><h5 id="instanceofoperator-v-target" tabindex="-1"><a class="header-anchor" href="#instanceofoperator-v-target" aria-hidden="true">#</a> InstanceofOperator(V,target)</h5><p>The abstract Operation InstanceofOperator takes arguments V and target.It implements the generic algorithn for detemining if V is an instance of target either by consulting target&#39;s @@hasInstance method or,if absebt,determining whether the value of target&#39;s &quot;prototype&quot; property is present in V&#39;s prototype chain.</p><ul><li>\u5982\u679CType \u4E0D\u662F\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u62A5TyoeError exception</li><li>Let instOfHandler be ? GetMethod(target , @@hasInstance)</li><li>If instOfHandler is not undefined , then a. Return !ToBoolean(?Call(instOfHandler,target,\u300AV\u300B))</li><li>If IsCallable(target) is false , \u62A5TyoeError exception</li><li>Return ? OrdinaryHasInstance(target,V) | name | description | value and purpose | | --- | --- | --- | | @@isConcatSpreadable | Symbol.isConcatSpreadable| \u4E00\u4E2A\u7528\u4E8E\u6807\u8BC6\u662F\u5426\u53EF\u4EE5\u901A\u8FC7Array.prototype.concat\u8FDB\u884C\u6241\u5E73\u5316\u5904\u7406\u7684boolean\u503C \uFF5C</li></ul><h5 id="array-prototype-concat" tabindex="-1"><a class="header-anchor" href="#array-prototype-concat" aria-hidden="true">#</a> Array.prototype.concat</h5><table><thead><tr><th>name</th><th>description</th><th>value and purpose</th></tr></thead><tbody><tr><td>@@search</td><td>Symbol.search</td><td>String.protype.search</td></tr><tr><td>@@match</td><td>Symbol.match</td><td>String.prototype.match</td></tr><tr><td>@@matchAll</td><td>Symbol.matchAll</td><td>String.prototype.matchAll</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">caseInsensitiveSearch</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>search<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foobar&#39;</span><span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">caseInsensitiveSearch</span><span class="token punctuation">(</span><span class="token string">&#39;BaR&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// \u671F\u671B\u8F93\u51FA\u4E3A3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-1-6-the-numeric-type" tabindex="-1"><a class="header-anchor" href="#_6-1-6-the-numeric-type" aria-hidden="true">#</a> 6.1.6 the Numeric type</h4><p>~ \u975E &amp; \u4E0E ^\u5F02\u6216 \uFF5C \u6216 &lt;&lt; \u5DE6\u79FB &gt;&gt;\u53F3\u79FB &gt;&gt;&gt; \u65E0\u7B26\u53F7\u53F3\u79FB ECMAScript has two built-in types : Number and BigInt. The following abstract operations are defined over these numeric types. The &quot;Result&quot; column shows the return type, along with an indication if it is possible for some invocations of the operation to return an abrupt completion.</p><table><thead><tr><th>Operation</th><th>Example source</th><th>Invoked by the Evaluation semantics of ...</th><th>Result</th></tr></thead><tbody><tr><td>Number::unaryMinus(\u5355\u6570\u51CF\u6CD5)</td><td>-x</td><td>Unary - Operator</td><td>Number</td></tr><tr><td>BigInt::unaryMinus</td><td>-x</td><td>Unary - Operator</td><td>BigInt</td></tr><tr><td>\uFF5C Number::bitwiseNOT(\u4F4D\u8FD0\u7B97\u975E)</td><td>~x</td><td>Bitwise NOT Operator (~)</td><td>Number</td></tr><tr><td>BigInt::bitwiseNOT</td><td>~x</td><td>Bitwise NOT Operator(~)</td><td>BigInt</td></tr><tr><td>Number::exponentiate(\u6307\u6570\u5316)</td><td>x**y</td><td>Exponentiation Operator and Math.pow(base,exponent)</td><td>Number</td></tr><tr><td>BigInt::exponentiate</td><td>x**y</td><td>Exponentiation Operator and Math.pow(base,exponent)</td><td>Number</td></tr><tr><td>Number::multiply</td><td>x*y</td><td>Multiplicative Operators</td><td>Number</td></tr><tr><td>BigInt::multiply</td><td>x*y</td><td>Multiplicative(\u4E58\u6CD5\u7684) Operators</td><td>BigInt</td></tr><tr><td>Number::divide</td><td>x/y</td><td>Multiplicative Operators</td><td>Number</td></tr><tr><td>BigInt::divide</td><td>x/y</td><td>Multiplicative Operators</td><td>either a normal completion containing a BigInt or an abrupt completion</td></tr><tr><td>Number::remainder</td><td>x%y</td><td>Multiplicative Operators</td><td>Number</td></tr><tr><td>BigInt::remainder(\u4F59\u6570)</td><td>x%y</td><td>Multiplicative Operators</td><td>either a normal completion containing a BigInt or an abrupt completion</td></tr><tr><td>Number::add</td><td>x++<br>++x<br>x+y</td><td>Postfix Increment Operator(\u540E\u7F00\u589E\u91CF\u8FD0\u7B97),Prefix Increment Operator, and The Addition Operator(-)</td><td>Number</td></tr><tr><td>BigInt::add</td><td>x++<br>++x<br>x+y</td><td>Postfix Increment Operator(\u540E\u7F00\u589E\u91CF\u8FD0\u7B97),Prefix Increment Operator, and The Addition Operator(-)</td><td>Number</td></tr><tr><td>Number::subtract</td><td>x--<br>--x<br>x-y</td><td>Postfix Decrement Operator(\u540E\u7F00\u589E\u91CF\u8FD0\u7B97),Prefix Decrement Operator, and The Addition Operator(-)</td><td>Number</td></tr><tr><td>BigInt::subtract</td><td>x--<br>--x<br>x-y</td><td>Postfix Decrement Operator(\u540E\u7F00\u589E\u91CF\u8FD0\u7B97),Prefix Decrement Operator, and The Addition Operator(-)</td><td>Number</td></tr><tr><td>Number::leftShift</td><td>x&lt;&lt;y</td><td>The Left Shift Opertor (&lt;&lt;)</td><td>Number</td></tr><tr><td>BigInt::leftShift</td><td>x&lt;&lt;y</td><td>The Left Shift Opertor (&lt;&lt;)</td><td>BigInt</td></tr><tr><td>Number::signedRightShift(\u6709\u7B26\u53F7\u53F3\u79FB)</td><td>x&gt;&gt;y</td><td>The Signed Right Shift Operator</td><td>Number</td></tr><tr><td>BigInt::signedRightShift</td><td>x&gt;&gt;y</td><td>The Signed Right Shift Operator</td><td>BigInt</td></tr><tr><td>Number::unsignedRightShift \uFF5C x&gt;&gt;&gt;y</td><td>The Unsigned Right Shift Operator \uFF5C Number</td><td></td><td></td></tr><tr><td>BigInt::unsignedRightShift</td><td>x&gt;&gt;&gt;y</td><td>The Unsigned Right Shift Operator</td><td>a throw completion</td></tr><tr><td>Number::lessThan</td><td>x&lt;y <br> x&gt;y <br> x&lt;=y <br> x&gt;=y</td><td>Relational Operators, via IsLessThan(x,y,LeftFirt)</td><td>Boolean or undefined (for unorderded inputs)</td></tr><tr><td>BigInt::lessThan</td><td>x&lt;y <br> x&gt;y <br> x&lt;=y <br> x&gt;=y</td><td>Relational Operators, via IsLessThan(x,y,LeftFirt)</td><td>Boolean</td></tr><tr><td>Number::equal</td><td>x==y <br> x!= y <br> x===y <br> x!==y</td><td>Equality Operators,via isStrictlyEqual(x,y)</td><td>Boolean</td></tr><tr><td>BigInt::equal</td><td>x==y <br> x!= y <br> x===y <br> x!==y</td><td>Equality Operators,via isStrictlyEqual(x,y)</td><td>Boolean</td></tr><tr><td>Number::sameValue</td><td>Object.is(x,y)</td><td>Object internal methods , via SameValue(x,y),to test exact value equality</td><td>Booolean</td></tr><tr><td>BigInt::sameValue</td><td>Object.is(x,y)</td><td>Object internal methods , via SameValue(x,y),to test exact value equality</td><td>Booolean</td></tr><tr><td>Number::sameValueZero</td><td>[x].includes(y)</td><td>Array,Map , and Set methods,via SameValueZero(x,y), to test value equality,ignorning the difference between +0 and -0</td><td>Boolean</td></tr><tr><td>BigInt::sameValueZero</td><td>[x].includes(y)</td><td>Array,Map , and Set methods,via SameValueZero(x,y), to test value equality,ignorning the difference between +0 and -0</td><td>Boolean</td></tr><tr><td>Number::bitwiseAnd(\u6309\u4F4D\u4E0E) \uFF5C x&amp;y</td><td>Binary bitwise operators</td><td>Number</td><td></td></tr><tr><td>BigInt::bitwiseAnd(\u6309\u4F4D\u4E0E) \uFF5C x&amp;y</td><td>Binary bitwise operators</td><td>BigInt</td><td></td></tr><tr><td>Number::bitwiseXOR</td><td>x^y</td><td>Binary bitwise operators</td><td>Number</td></tr><tr><td>BigInt::bitwiseXOR</td><td>x^y</td><td>Binary bitwise operators</td><td>BigInt</td></tr><tr><td>Number::bitwiseOR</td><td>x</td><td>y</td><td>Binary bitwise operators</td></tr><tr><td>BigInt::bitwiseOR</td><td>x</td><td>y</td><td>Binary bitwise operators</td></tr><tr><td>Number::toString</td><td>String(x)</td><td>many expression and built-in functions,via ToString(argument)</td><td>String</td></tr><tr><td>BigInt::toString</td><td>String(x)</td><td>many expression and built-in functions,via ToString(argument)</td><td>BigInt</td></tr></tbody></table><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token number">14n</span><span class="token operator">/</span><span class="token number">12n</span><span class="token operator">===</span><span class="token number">1n</span><span class="token comment">//true</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//1</span>
x<span class="token punctuation">;</span><span class="token comment">//2</span>
<span class="token operator">++</span>x<span class="token punctuation">;</span><span class="token comment">//3</span>
x<span class="token punctuation">;</span><span class="token comment">//3</span>
<span class="token comment">//BigInt</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token number">1n</span><span class="token punctuation">;</span>
y<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//1n</span>
y<span class="token punctuation">;</span><span class="token comment">//2n</span>
<span class="token operator">+</span><span class="token number">0</span><span class="token operator">===</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//true</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
<span class="token punctuation">[</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-1-6-1-the-number-type" tabindex="-1"><a class="header-anchor" href="#_6-1-6-1-the-number-type" aria-hidden="true">#</a> 6.1.6.1 the number type</h5><p>The Number type has exactly 18437736874454810627(2^64 - 2^53 + 3) values , representing the double-precision 64-bit format IEEE754-2019 values as specified in the IEEE Standard for Binary Floating-Point Arithmetic,exect that the 9007199254740990 (that is 2^53 -2)disctinct &quot;Not-a-Number&quot; values of the IEEE Standard are represented in ECMAScipt as a single special NaN value .(Note that the NaN value is produced by the program expression NaN) In some inplementations,extemal code might be able to detect a diffence between various Not-a-Number values , by such behavaious is implementation-defined;to ECMASript code ,all NaN values are indistinguishable from each other.</p><div class="custom-container tip"><p class="custom-container-title">note</p><p>the bit pattern that might be obeserd in ArrayBuffer or a ShaderedArrayBuffer after a Number value has been stored into it is not necessarily the same as the internal representation of the Number value used by the Number value used by the ECMAScript implemetation.</p></div><p>......</p><h6 id="_6-1-6-1-8-number-substract-x-y" tabindex="-1"><a class="header-anchor" href="#_6-1-6-1-8-number-substract-x-y" aria-hidden="true">#</a> 6.1.6.1.8 Number::substract(x,y)</h6><p>return Number::add(x,Number::unaryMinus(y))</p><h6 id="_6-1-6-1-20-number-tostring-x" tabindex="-1"><a class="header-anchor" href="#_6-1-6-1-20-number-tostring-x" aria-hidden="true">#</a> 6.1.6.1.20 Number::toString(x)</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;NaN&#39;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;0&#39;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token operator">-</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">===</span><span class="token number">Infinity</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">&#39;Infinity&#39;</span>
  <span class="token keyword">else</span> <span class="token comment">//\u2B07</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),F=n("img",{src:d,alt:"else"},null,-1),T={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number",target:"_blank",rel:"noopener noreferrer"},P=s("MDN Number"),z=p(`<h3 id="_6-1-7-the-object-type" tabindex="-1"><a class="header-anchor" href="#_6-1-7-the-object-type" aria-hidden="true">#</a> 6.1.7 The Object Type</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> string <span class="token operator">=</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;init&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  string
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token keyword">get</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>
  obj<span class="token punctuation">,</span>
  <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token function-variable function">get</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">,</span>obj<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//2 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),D={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames",target:"_blank",rel:"noopener noreferrer"},R=s("Object.getOwnPropertyNames"),L={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"},V=s("Object.defineProperty"),J={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable",target:"_blank",rel:"noopener noreferrer"},W=s("Object.prototype.propertyIsEnumerable"),H=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>
  obj<span class="token punctuation">,</span>
  <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>
  obj<span class="token punctuation">,</span>
  <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">false</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
obj<span class="token punctuation">.</span><span class="token function">propertyIsEnumerable</span><span class="token punctuation">(</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="object-create-null" tabindex="-1"><a class="header-anchor" href="#object-create-null" aria-hidden="true">#</a> Object.create(null)</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> x <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
y<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="circle"></div><h4 id="object-getprototypeof" tabindex="-1"><a class="header-anchor" href="#object-getprototypeof" aria-hidden="true">#</a> Object.getPrototypeOf()</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//{}</span>
<span class="token keyword">class</span> <span class="token class-name">Fun</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name
  <span class="token punctuation">}</span>

  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> fun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Fun</span><span class="token punctuation">(</span><span class="token string">&quot;fun&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//{} </span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun<span class="token punctuation">.</span>__proto__<span class="token operator">===</span><span class="token class-name">Fun</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="javascript\u5F00\u53D1\u8005\u7EDE\u5C3D\u8111\u6C41\u60F3\u8981\u6A21\u4EFF\u7C7B\u7684\u884C\u4E3A" tabindex="-1"><a class="header-anchor" href="#javascript\u5F00\u53D1\u8005\u7EDE\u5C3D\u8111\u6C41\u60F3\u8981\u6A21\u4EFF\u7C7B\u7684\u884C\u4E3A" aria-hidden="true">#</a> JavaScript\u5F00\u53D1\u8005\u7EDE\u5C3D\u8111\u6C41\u60F3\u8981\u6A21\u4EFF\u7C7B\u7684\u884C\u4E3A</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">myName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//a</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u5728new\u7684\u8FC7\u7A0B\u4E2D,a\u7684\u5185\u90E8[[prototype]]\u4F1A\u5173\u8054\u5230Foo.prototype\u4E0A\u3002 \u5F53a\u4E2D\u65E0\u6CD5\u627E\u5230myName\u65F6,\u4F1A\u901A\u8FC7\u59D4\u6258\u5728Foo.prototype\u4E0A\u627E\u5230\u3002 \u540C\u6837\uFF0Ca.constructor\u59D4\u6258\u7ED9Foo.prototype,\u800CFoo.prototype.constructor \u9ED8\u8BA4\u6307\u5411Foo/</p></div><h5 id="\u{1F914}\u601D\u8003\u4E0B\u9762\u7684\u4EE3\u7801" tabindex="-1"><a class="header-anchor" href="#\u{1F914}\u601D\u8003\u4E0B\u9762\u7684\u4EE3\u7801" aria-hidden="true">#</a> \u{1F914}\u601D\u8003\u4E0B\u9762\u7684\u4EE3\u7801</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">myName</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token operator">===</span>Object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="\u539F\u578B\u7EE7\u627F" tabindex="-1"><a class="header-anchor" href="#\u539F\u578B\u7EE7\u627F" aria-hidden="true">#</a> \u539F\u578B\u7EE7\u627F</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>label</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>label <span class="token operator">=</span> label<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//prototype\u5173\u8054</span>
<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myLabel</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>label<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;obj a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">myName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//A</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">myLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//obj a</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>\u5173\u4E8E\u4F7F\u7528<code>Bar.prototype = Object.create(Foo.prototype);</code> \u521B\u5EFA\u4E00\u4E2A\u65B0\u5BF9\u8C61\u5E76\u628A\u5B83\u5173\u8054\u5230Bar.prototype\u4E0A\uFF0C\u76F4\u63A5\u628A\u539F\u59CB\u7684Bar.prototype\u629B\u5F03\u3002</p></div>`,14),U={id:"object-setprototypeof",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#object-setprototypeof","aria-hidden":"true"},"#",-1),K=s(),Z={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf",target:"_blank",rel:"noopener noreferrer"},X=s("Object.setPrototypeOf()"),$=p(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//ES6\u5F00\u59CB\u53EF\u4EE5\u76F4\u63A5\u4FEE\u6539\u73B0\u6709\u7684Bar.prototype</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="\u5185\u7701-\u53CD\u5C04" tabindex="-1"><a class="header-anchor" href="#\u5185\u7701-\u53CD\u5C04" aria-hidden="true">#</a> \u5185\u7701\uFF08\u53CD\u5C04\uFF09</h5><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">Baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Baz</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Baz</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>baz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="function-name" tabindex="-1"><a class="header-anchor" href="#function-name" aria-hidden="true">#</a> function name</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">func</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;func&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> symbolKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;symbolKey description&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">objFunc</span><span class="token operator">:</span>func<span class="token punctuation">,</span>
  <span class="token punctuation">[</span>symbolKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;symbolFunc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//func</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>objFunc<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//func</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//anonymous</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">func</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//bound func</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>symbolKey<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">//[symbolKey description]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="object-is" tabindex="-1"><a class="header-anchor" href="#object-is" aria-hidden="true">#</a> Object.is</h6><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">//ES5</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Object<span class="token punctuation">,</span><span class="token string">&#39;is&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token function-variable function">value</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">===</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> x<span class="token operator">!==</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span><span class="token operator">/</span>x<span class="token operator">===</span> <span class="token number">1</span><span class="token operator">/</span>y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//Object.is(NaN,NaN)</span>
    <span class="token comment">//true</span>
    <span class="token keyword">return</span> x<span class="token operator">!==</span>x<span class="token operator">&amp;&amp;</span>y<span class="token operator">!==</span>y
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="object-assign" tabindex="-1"><a class="header-anchor" href="#object-assign" aria-hidden="true">#</a> Object.assign</h6><div class="tip-aqua"> The assign function is used to copy the values of all of the enumerable own properties from one or more source objects to a target object. </div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> source1 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">d</span><span class="token operator">:</span><span class="token string">&quot;d&quot;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> source2 <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">e</span><span class="token operator">:</span>source1
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source1<span class="token punctuation">,</span>source2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//assign\u6D45\u590D\u5236</span>
source1<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">//{&quot;a&quot;:1,&quot;b&quot;:10,&quot;c&quot;:[3,2,1],&quot;d&quot;:&quot;d&quot;,&quot;e&quot;:{&quot;b&quot;:20,&quot;c&quot;:[3,2,1],&quot;d&quot;:&quot;d&quot;}}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Object.assign\u7684\u5E38\u7528\u573A\u666F</p><div class="custom-container tip"><p class="custom-container-title">1.\u4E3A\u5BF9\u8C61\u6DFB\u52A0\u5C5E\u6027</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">,</span>b<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> newPoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token string">&quot;abb&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;bba&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//Point {a: &#39;abb&#39;, b: &#39;bba&#39;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">2.\u4E3A\u5BF9\u8C61\u6DFB\u52A0\u65B9\u6CD5</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token string">&#39;5&#39;</span>
<span class="token punctuation">}</span>
x<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
x<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span>item <span class="token keyword">in</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//for ... in \u5FAA\u73AF\u904D\u5386\u5BF9\u8C61\u81EA\u8EAB\u548C\u7EE7\u627F\u7684\u53EF\u679A\u4E3E\u5C5E\u6027  </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">3.\u514B\u9686\u5BF9\u8C61</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u8FF0\u65B9\u6CD5\u65E0\u6CD5\u514B\u9686origin\u7684\u7EE7\u627F\u94FE</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">origin</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">const</span> originProto <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>originProto<span class="token punctuation">)</span><span class="token punctuation">,</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span> <span class="token operator">:</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">11</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token string">&quot;hh&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">configurable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//enumerable\u4E00\u5B9A\u8981\u8BBE\u4E3Atrue</span>
<span class="token keyword">const</span> tar <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tar<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">4.\u5408\u5E76\u591A\u4E2A\u5BF9\u8C61</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span><span class="token operator">...</span>source</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span><span class="token operator">...</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u5982\u679C\u8981\u8FD4\u56DE\u65B0\u5BF9\u8C61</span>
<span class="token keyword">const</span> <span class="token function-variable function">mergeNew</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>source</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token operator">...</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">5.\u4E3A\u5C5E\u6027\u6307\u5B9A\u9ED8\u8BA4\u503C</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">DEFAULT</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">logLevel</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token literal-property property">outputFormat</span><span class="token operator">:</span><span class="token string">&#39;html&#39;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">processContent</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  options <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token constant">DEFAULT</span><span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="object-getownpropertydescriptor" tabindex="-1"><a class="header-anchor" href="#object-getownpropertydescriptor" aria-hidden="true">#</a> Object.getOwnPropertyDescriptor</h6><p>\u83B7\u53D6\u5C5E\u6027\u7684\u63CF\u8FF0\u5BF9\u8C61</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">val</span><span class="token operator">:</span><span class="token number">12</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;val&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">\u5C0F\u77E5\u8BC6</p><p>JSON.stringify\u53EA\u4E32\u884C\u5316\u5BF9\u8C61\u81EA\u8EAB\u7684\u53EF\u679A\u4E3E\u5C5E\u6027;</p></div><h6 id="\u5C5E\u6027\u7684\u904D\u5386" tabindex="-1"><a class="header-anchor" href="#\u5C5E\u6027\u7684\u904D\u5386" aria-hidden="true">#</a> \u5C5E\u6027\u7684\u904D\u5386</h6><div class="custom-container tip"><p class="custom-container-title">for...in</p></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;c&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token literal-property property">writable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span><span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>
  <span class="token literal-property property">enumerable</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token literal-property property">value</span><span class="token operator">:</span><span class="token string">&#39;e&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> sym <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;sym description&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>sym <span class="token operator">=</span> <span class="token string">&#39;sym value&#39;</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,30);function Q(Y,nn){const t=i("router-link"),o=i("ExternalLinkIcon");return r(),u("div",null,[n("nav",m,[n("ul",null,[n("li",null,[a(t,{to:"#_1-scope-\u8303\u56F4"},{default:e(()=>[v]),_:1})]),n("li",null,[a(t,{to:"#_2-conformance-\u4E00\u81F4\u6027\u58F0\u660E"},{default:e(()=>[b]),_:1})]),n("li",null,[a(t,{to:"#_3-normative-references-\u89C4\u8303\u6027\u53C2\u8003"},{default:e(()=>[h]),_:1})]),n("li",null,[a(t,{to:"#_4-overview-\u6982\u8FF0"},{default:e(()=>[f]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_4-1-web-script"},{default:e(()=>[y]),_:1})]),n("li",null,[a(t,{to:"#_4-2-hosts-and-implementations"},{default:e(()=>[g]),_:1})]),n("li",null,[a(t,{to:"#_4-3-ecmascript-overview"},{default:e(()=>[x]),_:1})]),n("li",null,[a(t,{to:"#_4-4-terms-and-definitions"},{default:e(()=>[j]),_:1})])])]),n("li",null,[a(t,{to:"#_5-notational-conventions-\u7B26\u53F7\u7EA6\u5B9A"},{default:e(()=>[w]),_:1})]),n("li",null,[a(t,{to:"#_6-ecmascript-data-types-and-values-ecma-\u6570\u636E\u7C7B\u578B\u548C\u503C"},{default:e(()=>[_]),_:1}),n("ul",null,[n("li",null,[a(t,{to:"#_6-1-ecmascript-language-types"},{default:e(()=>[O]),_:1})]),n("li",null,[a(t,{to:"#_6-1-7-the-object-type"},{default:e(()=>[S]),_:1})])])])])]),N,n("p",I,c(new Date(2009,11)),1),A,n("p",q,c(Date()),1),E,n("p",B,[s(" 'n\\u0303'.normalize('NFC') === "+c("n\u0303".normalize("NFC")),1),C,s(" 'n\\u0303'.normalize('NFD') === "+c("n\u0303".normalize("NFC")),1)]),M,n("p",null,[F,n("a",T,[P,a(o)])]),z,n("p",null,[n("a",D,[R,a(o)]),n("a",L,[V,a(o)]),n("a",J,[W,a(o)])]),H,n("h5",U,[G,K,n("a",Z,[X,a(o)])]),$])}var an=l(k,[["render",Q],["__file","js.html.vue"]]);export{an as default};
